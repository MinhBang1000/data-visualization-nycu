"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatehomework_3"]("main",{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tools */ \"./tools.js\");\nconst {\r\n  select,\r\n  csv,\r\n  text,\r\n  scaleLinear,\r\n  extent,\r\n  axisLeft,\r\n  axisBottom,\r\n  format,\r\n  line,\r\n  mouse,\r\n  transition,\r\n  scaleBand\r\n} = d3\r\n\r\n;\r\n\r\nconst svg = select('svg');\r\n\r\nconst width = +svg.attr('width');\r\nconst height = +svg.attr('height');\r\n\r\n\r\nconst heatmapCreate = (keys, data, edgeLength, title) => {\r\n  const inversedKeys = new Array()\r\n  for (let i = keys.length - 1; i >= 0; i--) {\r\n    inversedKeys.push(keys[i])\r\n  }\r\n  // Container Group 0 - Male\r\n  const g = select('svg').append('g')\r\n  // Build the axis and scale axis - X axis\r\n  const xScale = scaleBand()\r\n    .domain(keys.filter(k => k !== 'Sex'))\r\n    .range([0, edgeLength])\r\n    .padding(0)\r\n  const xAxis = axisBottom(xScale)\r\n    .tickPadding(-10)\r\n  const xAxisG = g.append('g')\r\n    .attr('class', 'x-axis')\r\n    .attr('transform', `translate(${0},${edgeLength})`)\r\n    .call(xAxis)\r\n  // Config the tick x-axis\r\n  xAxisG.selectAll('.x-axis .tick text')\r\n    .attr('x', -10)\r\n  // Y - axis\r\n  const yScale = scaleBand()\r\n    .domain(inversedKeys.filter(k => k !== 'Sex'))\r\n    .range([edgeLength, 0])\r\n    .padding(0)\r\n  const yAxis = axisLeft(yScale)\r\n  const yAxisG = g.append('g')\r\n    .attr('class', 'y-axis')\r\n    .attr('transform', `translate(${0},${0})`)\r\n    .call(yAxis)\r\n\r\n  // Remove all domain and tick line\r\n  g.selectAll('.tick line').remove()\r\n  g.selectAll('.domain').remove()\r\n\r\n  const colorScale = scaleLinear()\r\n    .domain([-1, -0.5, 0, 0.5, 1])\r\n    .range(\r\n      [\"#000814\", \"#001d3d\", \"#001d3d\", \"#003566\", \"#90e0ef\"]\r\n    );\r\n\r\n  // Fill the rect inside the group container\r\n  const rects = g.selectAll('rect')\r\n    .data(data, d => d)\r\n    .enter()\r\n    .append('rect')\r\n    .attr('class', 'data-rect')\r\n    // .attr(\"rx\", 4)\r\n    // .attr(\"ry\", 4)\r\n    .attr('x', (d) => xScale(d.keyX))\r\n    .attr('y', (d) => yScale(d.keyY))\r\n    .attr('width', xScale.bandwidth())\r\n    .attr('height', yScale.bandwidth())\r\n    .attr('fill', (d) => colorScale(d.r))\r\n\r\n  // Append text inside each rectangle\r\n  rects.each(function (d) {\r\n    const rect = select(this); // Select the current rect\r\n    const x = parseFloat(rect.attr('x')) + xScale.bandwidth() / 2; // Center x\r\n    const y = parseFloat(rect.attr('y')) + yScale.bandwidth() / 2; // Center y\r\n\r\n    const color = d.r < 0.85 ? 'white' : 'black'\r\n\r\n    // Append text\r\n    g.append('text')\r\n      .attr('x', x)\r\n      .attr('y', y)\r\n      .attr('dy', '.35em') // Vertically align text\r\n      .attr('text-anchor', 'middle') // Center text\r\n      .style('fill', `${color}`) // Set text color to black\r\n      .style('font-size', '10px') // Set the font size to a smaller value\r\n      .text(d.r % 1 === 0 ? Math.round(d.r) : d3.format('.2f')(d.r)); // Display whole number or rounded value\r\n  });\r\n  // Title\r\n  g.append('text')\r\n    .attr('class', 'h2-title')\r\n    .attr('y', -10)\r\n    .text(title);\r\n  return g\r\n}\r\n\r\n\r\nconst render = (data) => {\r\n  const title = `Correlation Matrices of Abalone Attributes: A Comparative Analysis of Male, Female, and Infant Categories`;\r\n  const names = [\"Male Abalone\", \"Female Abalone\", \"Infant Abalone\"]\r\n  const margin = {\r\n    top: 80,\r\n    right: 100,\r\n    bottom: 80,\r\n    left: 100,\r\n  };\r\n  const distance = 300\r\n  const innerWidth = distance\r\n  const innerHeight = distance\r\n  const maleData = []\r\n  const femaleData = []\r\n  const infantData = []\r\n  const keys = (0,_tools__WEBPACK_IMPORTED_MODULE_0__.extractKeys)(data)\r\n  const inversedKeys = new Array()\r\n  for (let i = keys.length - 1; i >= 0; i--) {\r\n    inversedKeys.push(keys[i])\r\n  }\r\n  // Seperate the data\r\n  const allData = data.filter(d => isNaN(d?.Sex))\r\n  allData.forEach((d) => {\r\n    if (d?.Sex === 'M') {\r\n      maleData.push(d)\r\n    } else if (d?.Sex === 'F') {\r\n      femaleData.push(d)\r\n    } else if (d?.Sex === 'I') {\r\n      infantData.push(d)\r\n    }\r\n  })\r\n\r\n  // Prepare the dataset\r\n  const all = (0,_tools__WEBPACK_IMPORTED_MODULE_0__.findR)(allData, keys)\r\n  const male = (0,_tools__WEBPACK_IMPORTED_MODULE_0__.findR)(maleData, keys)\r\n  const female = (0,_tools__WEBPACK_IMPORTED_MODULE_0__.findR)(femaleData, keys)\r\n  const infant = (0,_tools__WEBPACK_IMPORTED_MODULE_0__.findR)(infantData, keys)\r\n\r\n  // Male heatmap\r\n  const g0 = heatmapCreate(keys, female, 300, names[0])\r\n  g0.attr('transform', `translate(${margin.left}, ${margin.top})`)\r\n\r\n\r\n  // Female heatmap\r\n  const g1 = heatmapCreate(keys, female, 300, names[1])\r\n  g1.attr('transform', `translate(${margin.left + 400}, ${margin.top})`)\r\n\r\n  // Infant heatmap\r\n  const g2 = heatmapCreate(keys, infant, 300, names[2])\r\n  g2.attr('transform', `translate(${margin.left + 800}, ${margin.top})`)\r\n\r\n};\r\n\r\nconst updateFields = (data) => {\r\n  svg.selectAll('*').remove()\r\n  render(data)\r\n};\r\n\r\n\r\ntext('abalone.data').then((data) => {\r\n  const parsedData = data.split('\\n').map(row => {\r\n    const columns = row.split(',');\r\n    return {\r\n      'Sex': columns[0],                      // Column 1: Sex\r\n      'Length': +columns[1],                  // Column 2: Length\r\n      'Diameter': +columns[2],                // Column 3: Diameter\r\n      'Height': +columns[3],                  // Column 4: Height\r\n      'Whole Weight': +columns[4],             // Column 5: Whole Weight\r\n      'Shucked Weight': +columns[5],           // Column 6: Shucked Weight\r\n      'Viscera Weight': +columns[6],           // Column 7: Viscera Weight\r\n      'Shell Weight': +columns[7],             // Column 8: Shell Weight\r\n      'Rings': +columns[8]                    // Column 9: Rings\r\n    };\r\n  })\r\n  updateFields(parsedData)\r\n})\n\n//# sourceURL=webpack://homework-3/./index.js?");

/***/ }),

/***/ "./tools.js":
/*!******************!*\
  !*** ./tools.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractKeys: () => (/* binding */ extractKeys),\n/* harmony export */   findMinMax: () => (/* binding */ findMinMax),\n/* harmony export */   findR: () => (/* binding */ findR),\n/* harmony export */   findValues: () => (/* binding */ findValues),\n/* harmony export */   replaceHyphenWithSpace: () => (/* binding */ replaceHyphenWithSpace)\n/* harmony export */ });\nconst extractKeys = (data) => {\r\n    const exampleObject = data[0]\r\n    const keys = Object.keys(exampleObject)\r\n    const dimensions = keys.filter(k => k !== 'class')\r\n    return dimensions\r\n}\r\n\r\nconst findMinMax = (data) => {\r\n    const exampleObject = data[0]\r\n    const keys = Object.keys(exampleObject)\r\n    const dimensions = keys.filter(k => k !== 'class')\r\n\r\n    let min = data[0][dimensions[0]]\r\n    let max = data[0][dimensions[0]]\r\n    data.forEach((d) => {\r\n        dimensions.forEach((dim) => {\r\n            min = min < d[dim] ? min : d[dim]\r\n        })\r\n        dimensions.forEach((dim) => {\r\n            max = max > d[dim] ? max : d[dim]\r\n        })\r\n    })\r\n    return {\r\n        max: Math.round(max),\r\n        min: Math.round(min)\r\n    }\r\n}\r\n\r\nconst findValues = (a,b,duration) => {\r\n    const values = []\r\n    const tempDura = duration\r\n    for (let i = a; i <= b; i++){\r\n        if (duration === 0 || i === a) {\r\n            values.push(i)\r\n            duration = tempDura\r\n        }\r\n        duration--\r\n    }\r\n    return values\r\n}\r\n\r\nconst replaceHyphenWithSpace = (str) => {\r\n    return str.replace(/-/g, ' ');\r\n}\r\n\r\nconst caculateR = (keyX, keyY, data) => {\r\n    // Extract values for the two keys\r\n    const xValues = data.map(d => d[keyX]);\r\n    const yValues = data.map(d => d[keyY]);\r\n\r\n    // Calculate means\r\n    const meanX = xValues.reduce((a, b) => a + b, 0) / xValues.length;\r\n    const meanY = yValues.reduce((a, b) => a + b, 0) / yValues.length;\r\n    \r\n\r\n    // Calculate the numerator and denominator for Pearson correlation\r\n    let numerator = 0;\r\n    let denominatorX = 0;\r\n    let denominatorY = 0;\r\n\r\n    for (let i = 0; i < xValues.length; i++) {\r\n        const diffX = xValues[i] - meanX;\r\n        const diffY = yValues[i] - meanY;\r\n        numerator += diffX * diffY;\r\n        denominatorX += diffX ** 2;\r\n        denominatorY += diffY ** 2;\r\n    }\r\n\r\n    // Calculate Pearson correlation coefficient\r\n    const r = numerator / Math.sqrt(denominatorX * denominatorY);\r\n    return r;\r\n};\r\n\r\n\r\nconst findR = (data, keys) => {\r\n    const arr = new Array() // Initialize an object to store correlation coefficients\r\n\r\n    for (let i = 0; i < keys.length; i++) { // Loop through all keys\r\n        for (let j = 0; j < keys.length; j++) {\r\n            const keyX = keys[i];\r\n            const keyY = keys[j];\r\n\r\n            // Ensure not to calculate the correlation of 'Sex'\r\n            if (keyX !== 'Sex' && keyY !== 'Sex') {\r\n                const r = caculateR(keyX, keyY, data); // Calculate correlation\r\n                arr.push({\r\n                    keyX: keyX,\r\n                    keyY: keyY,\r\n                    r: r\r\n                }) // Store the result\r\n            }\r\n        }\r\n    }\r\n    return arr; // Return the object containing correlation coefficients\r\n};\r\n\n\n//# sourceURL=webpack://homework-3/./tools.js?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("0706e81f6465abbe38da")
/******/ })();
/******/ 
/******/ }
);